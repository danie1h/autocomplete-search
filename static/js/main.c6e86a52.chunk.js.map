{"version":3,"sources":["resources/images/search-icon.svg","search-filter/search-filter.js","search-bar/search-bar.js","search-results/search-results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchFilter","props","filterTypes","productTypes","map","type","index","react_default","a","createElement","key","charAt","value","className","onChange","SearchBar","productNameMatches","searchPattern","searchInput","length","RegExp","concat","escapedSearchInput","filterOn","productList","filter","product","test","name","onSubmit","handleSubmit","placeholder","handleChange","list","id","src","searchIcon","alt","height","SearchResults","productMatchedResults","searchResultsPattern","href","url","target","rel","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filterType","submitted","updateSearchInput","bind","assertThisInitialized","updateFilterType","event","str","replace","setState","preventDefault","search_filter_SearchFilter","toConsumableArray","self","indexOf","sort","search_bar_SearchBar","search_results_SearchResults","Component","Boolean","window","location","hostname","match","productListDeduped","data","products","findIndex","productDupe","curr","next","toLowerCase","slice","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6e86a52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search-icon.82710378.svg\";","import React from 'react'\r\nimport './search-filter.css'\r\n\r\n/**\r\n  * Component: SearchFilter\r\n  *\r\n  * A user can filter their results by selecting options in checkboxes\r\n  * Filter data includes:\r\n  * - type: CREDIT_CARD, INVESTMENT, BANK, LOAN, MORTGAGE\r\n  *   - added an All option\r\n  *\r\n  * Properties from App:\r\n  * - productTypes: unique product types including all\r\n  * - onChange: handles changes on the filter selection\r\n  */\r\nexport const SearchFilter = (props) => {\r\n    let filterTypes = props.productTypes.map( (type, index) =>  {\r\n      return (<option key={type.charAt(0)} value={type}>{type}</option>)\r\n    })\r\n\r\n    return (\r\n      <div className=\"search-filter\" >\r\n        <select className='filter-options' onChange={props.onChange}>\r\n          {filterTypes}\r\n        </select>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport searchIcon from '../resources/images/search-icon.svg'\r\nimport './search-bar.css'\r\n\r\n/**\r\n  * Component: SearchBar\r\n  *\r\n  * A user can find financial companies based on their search\r\n  * Features include:\r\n  * - autocomplete results are populated in the search box dropdown\r\n  * - ability to reset input by selecting the \"x\" icon\r\n  *\r\n  * Properties from App:\r\n  * - productList: list of all products and info\r\n  * - filterOn: filter product list based on filter type\r\n  * - onChange: handles changes on the search bar\r\n  * - searchInput: text the user enterred in the search bar\r\n  * - escapedSearchInput: text the user enterred in the search bar with escapped char\r\n  * - handleSubmit: flag to check if user selected submit\r\n  */\r\nexport const SearchBar = (props) => {\r\n    let productNameMatches = []\r\n    let searchPattern = (props.searchInput.length > 1) ? new RegExp(`${props.escapedSearchInput}`, `i`) : new RegExp(`^${props.escapedSearchInput}`, `i`)\r\n\r\n    if(props.escapedSearchInput && props.filterOn === `All`) {\r\n      productNameMatches = props.productList.filter( (product, index) => searchPattern.test(product.name) === true)\r\n        .filter( (product, index) => index < 10 )\r\n        .map( (product, index) => {\r\n          return (<option key={index} value={product.name} />)\r\n        })\r\n    } else if(props.escapedSearchInput && props.filterOn !== `ALL`) {\r\n      productNameMatches = props.productList.filter( (product, index) => searchPattern.test(product.name) === true && product.type === props.filterOn)\r\n        .filter( (product, index) => index < 10 )\r\n        .map( (product, index) => {\r\n          return (<option key={index} value={product.name} />)\r\n        })\r\n    }\r\n\r\n    return (\r\n      <div className='search-bar'>\r\n        <form className='search-bar-contents' onSubmit={props.handleSubmit}>\r\n          <input className='search-input' type='search' placeholder='search' value={props.searchInput} onChange={props.handleChange} list='search-product-matches'/>\r\n          <datalist id='search-product-matches'>\r\n            {productNameMatches}\r\n          </datalist>\r\n          <input className='submit-icon' type='image' src={searchIcon} alt='submit' height=\"25\"/>\r\n        </form>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './search-results.css'\r\n\r\n/**\r\n  * Component: SearchResults\r\n  *\r\n  * Displays the product information or a does not exist message\r\n  *\r\n  * Properties from App:\r\n  * - searchInput: text the user enterred in the search bar\r\n  * - escapedSearchInput: text the user enterred in the search bar with escapped char\r\n  * - filterOn: filter product list based on filter type\r\n  * - productList: list of all products and info\r\n  */\r\nexport const SearchResults = (props) => {\r\n    let productMatchedResults = []\r\n    let searchResultsPattern = new RegExp(`${props.escapedSearchInput}`, `i`)\r\n\r\n    if(props.escapedSearchInput && props.filterOn === 'All') {\r\n      productMatchedResults = props.productList.filter( product => searchResultsPattern.test(product.name) === true)\r\n       .map( (product, index) => {\r\n         return (\r\n           <a href={product.url} target='_blank' rel='noopener noreferrer'>\r\n             <li key={index}>\r\n               <p className=\"result-name\">{product.name}</p>\r\n               <p className=\"result-type\"><strong>Institution Type:</strong> {product.type}</p>\r\n               <p className=\"result-url\">{product.url}</p>\r\n             </li>\r\n           </a>\r\n         )\r\n       })\r\n    } else if (props.escapedSearchInput && props.filterOn !== `ALL`) {\r\n      productMatchedResults = props.productList.filter( product => searchResultsPattern.test(product.name) === true && product.type === props.filterOn)\r\n          .map( (product, index) => {\r\n            return (\r\n              <a href={product.url} target='_blank' rel='noopener noreferrer'>\r\n                <li key={index}>\r\n                    <p className=\"result-name\"><a href={product.url} target='_blank' rel='noopener noreferrer'>{product.name}</a></p>\r\n                    <p className=\"result-type\"><strong>Institution Type:</strong> {product.type}</p>\r\n                    <p className=\"result-url\">{product.url}</p>\r\n                </li>\r\n              </a>\r\n            )\r\n          })\r\n    }\r\n\r\n    return (\r\n      <div className='search-results'>\r\n        <h2>Search Results</h2>\r\n        <hr />\r\n        { (productMatchedResults.length === 0) ?\r\n            <p className='invalid-search'>Product does not exist. Please search for another product.</p>\r\n            :\r\n            <div className='successful-results'>\r\n              <ul>\r\n                {productMatchedResults}\r\n              </ul>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport { SearchFilter } from './search-filter/search-filter.js'\nimport { SearchBar } from './search-bar/search-bar.js'\nimport { SearchResults } from './search-results/search-results.js'\n\n/**\n  * Component: App\n  *\n  * main app which calls child components\n  * Properties:\n  * - productList: all financial products and info deduped and sorted\n  *\n  * Parameters passed to SearchFilter:\n  * - productTypes: unique product types including all\n  * - onChange: handles changes on the filter selection\n  * Parameters passed to SearchBar:\n  * - productList: list of all products and info\n  * - filterOn: filter product list based on filter type\n  * - onChange: handles changes on the search bar\n  * - searchInput: text the user enterred in the search bar\n  * - escapedSearchInput: text the user enterred in the search bar with escapped char\n  * - handleSubmit: flag to check if user selected submit\n  * Parameter passed to SearchResults:\n  * - searchInput: text the user enterred in the search bar\n  * - escapedSearchInput: text the user enterred in the search bar with escapped char\n  * - filterOn: filter product list based on filter type\n  * - productList: list of all products and info\n  */\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      /** content entered in the search bar */\n      searchInput: '',\n      /** content entered in the search bar and escaped parenthesis */\n      escapedSearchInput: '',\n      /** type of institute user would like to filter on */\n      filterType: 'All',\n      /** track if the user submitted the search */\n      submitted: false\n    }\n\n    this.updateSearchInput = this.updateSearchInput.bind(this)\n    this.updateFilterType = this.updateFilterType.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  /** When input is modified, update the state searchInput, escapedSerachInput and set submitted to false*/\n  updateSearchInput(event) {\n    // escape (, ), +, *\n    let str = event.target.value.replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)').replace(/\\*/g, '\\\\*').replace(/\\+/g, '\\\\+')\n\n    this.setState({\n      searchInput: event.target.value,\n      escapedSearchInput: str,\n      submitted: false\n    })\n  }\n\n  /** When a new filter is selected, update the filter value and set submitted to false*/\n  updateFilterType(event) {\n    this.setState({\n      filterType: event.target.value,\n      submitted: false\n    })\n  }\n\n  /** When user selects the search icon or presses enter, set submitted to true and results will display*/\n  handleSubmit(event) {\n    this.setState({\n      submitted: true\n    })\n    event.preventDefault()\n  }\n\n  render () {\n    return (\n      <div className='auto-search-app'>\n        <h1>Financial Institution Search</h1>\n        <div className='search-section'>\n          <SearchFilter onChange={this.updateFilterType} productTypes={['All', ...this.props.productList.map(product => product.type).filter( (type, index, self) => self.indexOf(type) === index ).sort()]}/>\n          <SearchBar searchInput={this.state.searchInput} escapedSearchInput={this.state.escapedSearchInput} filterOn={this.state.filterType} handleChange={this.updateSearchInput} productList={this.props.productList} handleSubmit={this.handleSubmit}/>\n        </div>\n        { (this.state.submitted) ? <SearchResults searchInput={this.state.searchInput} escapedSearchInput={this.state.escapedSearchInput} filterOn={this.state.filterType} productList={this.props.productList}/> : '' }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport data from './resources/data/products.json'\nimport * as serviceWorker from './serviceWorker';\n\n\n/** de-duped and sorts data on product.name from 475 records to 319 */\n/** modify the product type to letter case and swith '_' with spaces */\nconst productListDeduped = data.products\n  .filter( (product, index, self) => index === self.findIndex( productDupe => product.name === productDupe.name) )\n  .sort( (curr, next) => (curr.name.toLowerCase() > next.name.toLowerCase()) ? 1 : (curr.name.toLowerCase() < next.name.toLowerCase()) ? -1 : 0)\n  .map( product => {\n    return {\n      name: product.name,\n      url: product.url,\n      type: product.type.replace(/_/, ' ')\n        .replace(/([A-Z]+)/g, match =>  `${match.charAt(0)}${match.slice(1).toLowerCase()}` )\n      }\n  })\n\nReactDOM.render(<App productList={productListDeduped}/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}